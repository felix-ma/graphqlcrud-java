/*
 * Copyright 2012-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.graphqlcrud;

import graphql.schema.DataFetcher;
import graphql.schema.DataFetchingEnvironment;
import graphql.schema.GraphQLObjectType;
import graphql.schema.GraphQLType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

// This must be thread safe, as it will be called by multiple threads at same time
// This is very simple naively written class, will require more structure here
public class SQLDataFetcher implements DataFetcher<ResultSetList>{
    private static final Logger LOGGER = LoggerFactory.getLogger(SQLDataFetcher.class);

    @Override
    public ResultSetList get(DataFetchingEnvironment environment) throws Exception {
        SQLContext ctx = environment.getContext();
        ResultSet rs = null;

        GraphQLType type = environment.getParentType();

        if(type instanceof GraphQLObjectType) {
            String name = ((GraphQLObjectType) type).getName();
            String fieldName =  environment.getField().getName();

            if(name.equals("MutationType")) {
                if(fieldName.contains("create") || fieldName.contains("update")) {
                    if(executeMutation(environment, ctx) > 0) {
                        rs = executeSQL(environment, ctx);
                    } else {
                        return null;
                    }
                } else if(fieldName.contains("delete")) {
                    rs = executeSQL(environment,ctx);
                    if(rs != null) {
                        executeMutation(environment,ctx);
                    } else {
                        return null;
                    }
                }
            } else if(name.equals("QueryType")) {
                rs = executeSQL(environment, ctx);
                if (rs == null) {
                    return null;
                }
            }
        }
        return new ResultSetList(rs, true);
    }

    private int executeMutation(DataFetchingEnvironment environment, SQLContext ctx) throws Exception {
        String mutation = buildMutation(environment);
        ctx.setSqlMutation(mutation);
        Connection connection = ctx.getConnection();
        try (Statement statement = connection.createStatement()) {
            int count = statement.executeUpdate(mutation);

            // if there are auto generated PKs, fetch those.
            try (ResultSet rs = statement.getGeneratedKeys()) {
                if (rs.next()) {
                    Object key = rs.getObject(1);
                    ctx.setAutoGeneratedPrimaryKey(key);
                }
            }
            LOGGER.info("SQL executed: " + mutation);

            return count;
        }
    }

    private ResultSet executeSQL(DataFetchingEnvironment environment, SQLContext ctx) throws Exception {
        String sql = buildSQL(environment);
        ctx.setSQL(sql);
        LOGGER.info("SQL Executed:" + sql);

        ResultSet rs = null;
        Connection c = ctx.getConnection();
        Statement stmt = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
        ctx.setStmt(stmt);
        boolean hasResults = stmt.execute(sql);
        if (hasResults) {
            rs = stmt.getResultSet();
            ctx.setResultSet(rs);
            rs.last();
            int row = rs.getRow();
            if (row == 0) {
                return null;
            } else {
                rs.beforeFirst();
            }
        }
        return rs;
    }

    private String buildSQL(DataFetchingEnvironment environment) {
        SQLQueryBuilderVisitor visitor = new SQLQueryBuilderVisitor(environment.getContext());
        QueryScanner scanner = new QueryScanner(environment, visitor);
        scanner.scanQuery(environment.getField(), environment.getFieldDefinition(), null, true);
        String sql = visitor.getSQL();
        return sql;
    }

    private String buildMutation(DataFetchingEnvironment environment) {
        SQLMutationQueryBuilderVisitor visitor = new SQLMutationQueryBuilderVisitor(environment.getContext());
        QueryScanner scanner = new QueryScanner(environment,visitor);
        scanner.scanMutation(environment.getField(), environment.getFieldDefinition(), null, true);
        String sql = visitor.getSQL();
        return sql;
    }
}
